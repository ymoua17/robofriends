{"version":3,"sources":["Components/SearchBox/SearchBox.js","Components/Scroll/Scroll.js","Components/Card/Card.js","Components/CardList/CardList.js","Components/ErrorBoundary/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Searchbox","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Card","name","email","id","src","alt","CardList","robots","map","user","i","key","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","length","SearchBox","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,UAAU,OACX,2BAAOC,KAAK,SACZC,YAAY,gBACZF,UAAU,gCACVG,SAAUJ,MCEPK,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCSJC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKd,UAAY,mDACb,yBAAKe,IAAG,+BAA0BD,EAA1B,WAAuCE,IAAI,WACnD,6BACI,4BAAKJ,GACL,2BAAIC,MCWLI,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCS1BU,E,kDAlBX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,MAAQ,CACTC,UAAW,GAHA,E,8DAMDC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAG3B,OAAIG,KAAKJ,MAAMC,SACJ,mDAEAG,KAAKvB,MAAMK,a,GAdFoB,aCwCbC,G,wDAlCX,aAAe,IAAD,8BACV,gBAWJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAX1C,EAAKZ,MAAQ,CACTN,OAAQ,GACRgB,YAAa,IAJP,E,gEAOO,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACX,OAASuB,S,+BAKjC,IAAD,EACyBb,KAAKJ,MAA5BN,EADF,EACEA,OAAQgB,EADV,EACUA,YACTQ,EAAexB,EAAOyB,QAAO,SAAAC,GAC/B,OAAOA,EAAMhC,KAAKiC,cAAcC,SAASZ,EAAYW,kBAEzD,OAAS3B,EAAO6B,OACZ,yBAAK/C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAACgD,EAAD,CAAWjD,aAAc6B,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUd,OAAQwB,KAF1B,MAJkB,2C,GArBhBZ,cCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.48ff2fea.chunk.js","sourcesContent":["import React from 'react';\n\nconst Searchbox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input type='search'\n            placeholder='search robots' \n            className='pa3 b--green bg-lightest-blue'\n            onChange={searchChange}\n            ></input>\n        </div>\n        \n    )\n};\n\nexport default Searchbox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n};\n\nexport default Scroll;","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className = 'tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}200x200`} alt='robots'/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../Card/Card'\n\nconst CardList = ({ robots }) => {\n    return(\n        <div>\n            {\n                robots.map((user, i) => {\n                    return <Card \n                        key={i} \n                        id={robots[i].id}\n                        name={robots[i].name} \n                        email={robots[i].email}/>\n                }) \n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError : false,\n        }\n    }\n    componentDidCatch(error, info) {\n        this.setState({ hasError : true })\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h1>We have an error!!!</h1>\n        } else {\n            return this.props.children;\n        }\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport SearchBox from '../Components/SearchBox/SearchBox';\nimport Scroll from '../Components/Scroll/Scroll';\nimport CardList from '../Components/CardList/CardList';\nimport ErrorBoundary from '../Components/ErrorBoundary/ErrorBoundary'\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots : users}));\n    }\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n    render() {\n        const {robots, searchfield} = this.state;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase()); \n        })\n        return (!robots.length) ? <h1>Loading</h1> : (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filterRobots}/>\n                    </ErrorBoundary>n\n                </Scroll>\n            </div>  \n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App/> \n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}